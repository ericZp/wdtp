#
# WineDbg test - minidump handling
#
# Copyright (C) 2005 Eric Pouech
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# heavily copied from expr.wdtp and stack.wdtp

START "$flavor$" "expr foo bar"
	COMMAND "dir ."
	BREAK "break \"*/wdtp_expr.c\" : 76" 1 "test_expr" "wdtp_expr.c" 76

	COMMAND	"cont"

	COMMAND "minidump foo1.mdmp"

	BREAK   "break \"*/wdtp_expr.c\" : 64" 2 "wdtp_test_expr_part" "wdtp_expr.c" 64
	COMMAND "cont"

	COMMAND "minidump foo2.mdmp"
END

START "foo1.mdmp"
	COMMAND "dir ."
	# simple expression test
	EVAL 	"p argc" mv_hexa 2

	EVAL	"p ((argc + 22) * 3) / 4" mv_hexa 18
	# EVAL "p *&argc" mv_hexa 2
	# command line arguments are stored in heap, and we don't store heap
	# content in minidump, so expect error
	EVAL	"p ptr[0]" mv_error
	EVAL	"p ptr[1]" mv_error
	EVAL	"p ptr[0][0]" mv_error

	# EVAL "p (unsigned)ptr[0][0]" mv_hexa 'f'
	EVAL	"p 0xffffffff" mv_hexa 0xffffffff
	EVAL	"p (short unsigned)0xffffffff" mv_hexa 0xffff
	EVAL	"p (unsigned char)0x61616161" mv_hexa 'a'
	EVAL	"p (char)0x61616161" mv_char 'a'
	EVAL	"p /x 0xffffffff" mv_hexa 0xffffffff
	EVAL	"p /d 3 - 2 - 4" mv_integer -3
	EVAL	"p /d 2 + 3 << 4" mv_integer 80
	EVAL	"p /d 2 + -3" mv_integer -1
	EVAL	"p /d 2 - +3" mv_integer -1
	EVAL	"p /d 2 - -3" mv_integer 5
	# EVAL "p (char*)(unsigned)ptr[0]" mv_string "foo"

	SYSTEM "rm -f foo1.mdmp"
END

START "foo2.mdmp"
	COMMAND "dir ."
	# examine test

	# testing values inside structure
	EVAL	"p *t" mv_struct "toto_a=0x3, toto_b=0x12, bf1=0xc, bf2=0x3f, bf3=0xffffffde, bf4=0xfffffffc, ff=1.230000, fd=0.045600, s={a=0x5a5a5a5a, b=0xa5a5a5a5}, u={i=0xaaaaaaaa, u=0xaaaaaaaa}, x=one"
	EVAL	"p t->s" mv_struct "a=0x5a5a5a5a, b=0xa5a5a5a5"
	EVAL	"p /d t->u" mv_struct "i=-1431655766, u=2863311530"
	EVAL	"p /x t->u" mv_struct "i=0xaaaaaaaa, u=0xaaaaaaaa"
	EVAL	"p t->toto_a" mv_hexa 3
	EVAL	"p t->toto_b" mv_hexa 18
	EVAL	"p t->bf1" mv_hexa 12
	EVAL	"p t->bf2" mv_hexa 63
	EVAL	"p /d t->bf3" mv_integer -34
	EVAL	"p /d t->bf4" mv_integer -4
	EVAL	"p /d -t->bf4 * 12" mv_integer 48
	EVAL	"p /x t->u.u" mv_hexa 0xaaaaaaaa
	EVAL	"p t->ff" mv_float 1.23
	EVAL	"p t->fd" mv_float 4.56e-2
	EVAL	"p t->x" mv_string "one"

#	EVAL	"p sll" mv_integer -123456789000
#	EVAL	"p ull" mv_integer 123456789000

	# we don't copy global data segments in minidump yet
	EVAL	"p titi" mv_struct "pA=*** Invalid address..."
	# a couple of test items to enable when the can read back into data segments
	#EVAL	"p myint0" mv_integer -4
	#EVAL   "p wdtp_test_expr_te" mv_string "three"
	#EVAL	"p mytata[2]" mv_struct "i=14, s=4, c='c'"
	#EVAL	"p mytata[2].i" mv_hexa 14
	#EVAL	"p mytata[2].s" mv_hexa 4
	#EVAL	"p mytata[2].c" mv_char 'c'
	#EVAL	"p pmytata[2]" mv_struct "i=14, s=4, c='c'"
	#EVAL 	"p pmytata[2].i" mv_hexa 14
	#EVAL 	"p pmytata[2].s" mv_hexa 4
	#EVAL	"p pmytata[2].c" mv_char 'c'

	# test setting values inside structure
	EVAL	"set t->toto_a=45" mv_error
	EVAL	"p t->toto_a" mv_hexa 3

	EVAL	"set t->bf1=0" mv_null 0
	# EVAL "p t->bf1" mv_integer 0
	EVAL	"p t->bf2" mv_hexa 63

	SYSTEM "rm -f foo2.mdmp"
END

# heavily derived from stack.wdtp

START "$flavor$" "stack"
	COMMAND "dir ."
	BREAK "b \"*/wdtp_stack.c\" : 10" 1 "wdtp_test_stack_func" "wdtp_stack.c" 10
	COMMAND "cont"

	COMMAND "minidump foo.mdmp"
END

START "foo.mdmp"
	COMMAND "dir ."
	BACKTRACE
	CHECK_FRAME 0 "wdtp_test_stack_func" "wdtp_stack.c" 10 "i=0xa"

	CHECK_FRAME 1 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x9"
	CHECK_FRAME 2 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x8"
	CHECK_FRAME 3 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x7"
	CHECK_FRAME 4 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x6"
	CHECK_FRAME 5 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x5"
	CHECK_FRAME 6 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x4"
	CHECK_FRAME 7 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x3"
	CHECK_FRAME 8 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x2"
	CHECK_FRAME 9 "wdtp_test_stack_func" "wdtp_stack.c" 7 "i=0x1"

	CHECK_FRAME 10 "wdtp_test_stack_float" "wdtp_stack.c" 18 "i=0x1, f=1.234500, d=-1.456700"
	CHECK_FRAME 11 "test_stack" "wdtp_stack.c" 23 "argc=0, argv=..."
	CHECK_FRAME 12 "main" "wdtp.c" 12 "argc=0x2, argv=..."

	# testing local variables
	EVAL "p i" mv_hexa 10

	COMMAND "up"
	EVAL "p i" mv_hexa 9

	COMMAND "up 3"
	EVAL "p i" mv_hexa 6

	COMMAND "down 2"
	EVAL "p i" mv_hexa 8

	COMMAND "down"
	EVAL "p i" mv_hexa 9

	SYSTEM "rm -f foo.mdmp"
END
