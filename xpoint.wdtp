#
# WineDbg test - break & watch related functions
#
# Copyright (C) 2005 Eric Pouech
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

# TODO:
# - enabling / disabling bp
# - use of cont N
# - frame scoping for conditional bp
# - bp printing
# - get rid of wdt_evaluate call (or tweak it so that we get the returned value from the evaluation)
# - late bp (rechecked when a DLL is loaded)

DEBUGGER	"/home/eric/output-wine/wine-git/programs/winedbg/winedbg.exe.so"

# simple break point test without hardware assistance
START "wdtp.exe" "xpoint"
	BREAK "break test_xpoint" 1 "test_xpoint" "wdtp_xpoint.c" 31
	COMMAND "cont" ss_xpoint 1
	CHECK_LOCATION "wdtp_xpoint.c" 31

	BREAK "break 10" 2 "xpoint_write" "wdtp_xpoint.c" 10
	# ok(loc.offset != 0, "wrong bp offset\n");
	# offset = loc.offset;

	EVAL "p xpoint_g" $g_addr$
	BREAK "break * $g_addr$" 3 "xpoint_g" "wdtp_xpoint.c" 14

	COMMAND "cont" ss_xpoint 2
	CHECK_LOCATION "wdtp_xpoint.c" 10
	# ok(dbg.loc.offset == offset, "wrong offset %d\n", dbg.loc.offset);

	COMMAND "cont" ss_xpoint 3
	CHECK_LOCATION "xpoint_g" "wdtp_xpoint.c" 14
END

# simple break point test with hardware assistance
START "wdtp.exe" "xpoint"
	BREAK "break test_xpoint" 1 "test_xpoint" "wdtp_xpoint.c" 31
	COMMAND "cont" ss_xpoint 1
	CHECK_LOCATION "wdtp_xpoint.c" 31

	BREAK "hbreak 10" 2 "xpoint_write" "wdtp_xpoint.c" 10
	# ok(loc.offset != 0, "wrong bp offset\n");
	# offset = loc.offset;

	EVAL "p xpoint_g" $g_addr$
	BREAK "hbreak * $g_addr$" 3 "xpoint_g" "wdtp_xpoint.c" 14

	COMMAND "cont" ss_xpoint 2
	CHECK_LOCATION "wdtp_xpoint.c" 10
	# ok(dbg.loc.offset == offset, "wrong offset %d\n", dbg.loc.offset);

	COMMAND "cont" ss_xpoint 3
	CHECK_LOCATION "xpoint_g" "wdtp_xpoint.c" 14
END

# test for testing a condition on a breakpoint
START "wdtp.exe" "xpoint"
	BREAK "break xpoint_g : 17" 1 "xpoint_g" "wdtp_xpoint.c" 17

	COMMAND "cond 1 ret == 20"

	COMMAND "cont" ss_xpoint 1
	CHECK_LOCATION "wdtp_xpoint.c" 17

	EVAL "p ret" mv_integer 20
	EVAL "p i" mv_integer 8
END

# test for testing a condition on a breakpoint with hw assisted bp
START "wdtp.exe" "xpoint"
	BREAK "hbreak xpoint_g : 17" 1 "xpoint_g" "wdtp_xpoint.c" 17

	COMMAND "cond 1 ret == 20"

	COMMAND "cont" ss_xpoint 1
	CHECK_LOCATION "wdtp_xpoint.c" 17

	EVAL "p ret" mv_integer 20
	EVAL "p i" mv_integer 8
END

# watch test
START "wdtp.exe" "xpoint"
	BREAK "break test_xpoint" 1

	COMMAND "cont" ss_xpoint 1
	# COMMAND "step" ss_step

	BREAK "watch xpoint_int" 2 "xpoint_int"
	BREAK "watch v1" 3 ""
	
	COMMAND "cont" ss_xpoint 3
	# yes, we always get the line after where the instruction occured
	CHECK_LOCATION "wdtp_xpoint.c" 9
	EVAL "p *ptr" mv_integer 3

	COMMAND "cont" ss_xpoint 2
	# yes, we always get the line after where the instruction occured
	CHECK_LOCATION "wdtp_xpoint.c" 10
	EVAL "p xpoint_int" mv_integer 6
END
