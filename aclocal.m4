dnl Macros used to build the WDTP tool
dnl
dnl Copyright 2009 Eric Pouech
dnl
dnl This library is free software; you can redistribute it and/or
dnl modify it under the terms of the GNU Lesser General Public
dnl License as published by the Free Software Foundation; either
dnl version 2.1 of the License, or (at your option) any later version.
dnl
dnl This library is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
dnl Lesser General Public License for more details.
dnl
dnl You should have received a copy of the GNU Lesser General Public
dnl License along with this library; if not, write to the Free Software
dnl Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA
dnl
dnl As a special exception to the GNU Lesser General Public License,
dnl if you distribute this file as part of a program that contains a
dnl configuration script generated by Autoconf, you may include it
dnl under the same distribution terms that you use for the rest of
dnl that program.

dnl **** Add a new compiler to the known set ****
dnl
dnl Usage: WDTP_ADD_COMPILER(compiler-name, path-to-compiler, depends, cmd1, cmd2)
dnl
AC_DEFUN([WDTP_ADD_COMPILER],[
AS_IF([test "x$2" != "x"],[
	wdtp_compilers="$wdtp_compilers $1"
	AS_VAR_SET(wdtp_deps_$1, "$3")
	AS_VAR_SET(wdtp_cmd1_$1, "$4")
	AS_VAR_SET(wdtp_cmd2_$1, "$5")
	wdtp_full_test="$wdtp_full_test test_$1"
	])dnl
])

dnl **** Define a compiler version for a given compiler ****
dnl
dnl Usage: WDTP_ADD_COMPILER_VERSION(compiler-name, version, depends, cmd1, cmd2)
dnl
dnl FIXME: should test that $1 is defined as a compiler
AC_DEFUN([WDTP_ADD_COMPILER_VERSION],[
AS_IF([test "x$2" != "x"],[
	AS_VAR_SET(wdtp_versions_$1, "AS_VAR_GET(wdtp_versions_$1) $2")
	AS_IF([test "x$3" != "x"],[tmp="$3"],[tmp=AS_VAR_GET("wdtp_deps_$1")])
	AS_VAR_SET(wdtp_deps_$1_$2, "$tmp")
	AS_IF([test "x$4" != "x"],[tmp="$4"],[tmp=AS_VAR_GET("wdtp_cmd1_$1")])
	AS_VAR_SET(wdtp_cmd1_$1_$2, "$tmp")
	AS_IF([test "x$5" != "x"],[tmp="$5"],[tmp=AS_VAR_GET("wdtp_cmd2_$1")])
	AS_VAR_SET(wdtp_cmd2_$1_$2, "$tmp")
	tmp=AS_VAR_GET(full_test_$1)
	AS_VAR_SET(full_test_$1, "$tmp test_$1_$2")
	AC_SUBST(WDTP_LIST_TESTS, $full_test)
	])dnl
])

dnl **** Define a flavor for a known compiler ****
dnl
dnl Usage: WDTP_DEFINE_FLAVOR(compiler-name, flavor-name, flavor-condition, flavor-options, native)
dnl
AC_DEFUN([WDTP_DEFINE_FLAVOR],[
AS_VAR_SET(wdtp_flavors_$1, "AS_VAR_GET(wdtp_flavors_$1) $2")
AS_VAR_SET(wdtp_flavor_condition_$1_$2, "$3")
AS_VAR_SET(wdtp_flavor_option_$1_$2, "$4")
AS_IF([test "x$5" = "xtrue"],[dllext=""],[dllext="\$(DLLEXT)"])
AS_VAR_SET(wdtp_flavor_dllext_$1_$2, "${dllext}")
])

dnl **** Finish generation of WDTP information (Helper) ****
dnl
dnl Usage: WDTP_FINISH_COMPILER(compiler-name, compiler-ver-name)
dnl
AC_DEFUN([WDTP_FINISH_COMPILER],[
compiler=$1
compiler_ver=$2
test_flavors="test_${compiler_ver}:"
for flavor in AS_VAR_GET(wdtp_flavors_${compiler}); do
	test_flavors="$test_flavors test_${compiler_ver}_${flavor}"
	condition=AS_VAR_GET(wdtp_flavor_condition_${compiler}_${flavor})
	option=AS_VAR_GET(wdtp_flavor_option_${compiler}_${flavor})
	target="wdtp_${compiler_ver}_${flavor}.exe""AS_VAR_GET(wdtp_flavor_dllext_${compiler}_${flavor})"
	wdtp_full_target="$wdtp_full_target ${target}"
	deps=AS_VAR_GET(wdtp_deps_${compiler_ver})
	cmd1=AS_VAR_GET(wdtp_cmd1_${compiler_ver})
	cmd2=AS_VAR_GET(wdtp_cmd2_${compiler_ver})
	wdtp_full_cmds="$wdtp_full_cmds
${target}: ${deps}
	${cmd1} ${option} ${cmd2}
"
	wdtp_full_string="$wdtp_full_string
test_${compiler_ver}_${flavor}: all ${target}
	for i in \$(WDTPS); do \$(TOPOBJDIR)/wine wdbgtest.exe.so --debugger \$(TOPOBJDIR)/programs/winedbg/winedbg.exe.so --condition ${condition} --flavor ${target} \$\$i; done
"
done
wdtp_full_string="$wdtp_full_string
$test_flavors
"
])

dnl **** Finish generation of WDTP information ****
dnl
dnl Usage: WDTP_FINISH
dnl
AC_DEFUN([WDTP_FINISH],[
for compiler in $wdtp_compilers; do
	tmp=AS_VAR_GET(wdtp_versions_${compiler})
	AS_IF([test "x${tmp}" = "x"],
		[WDTP_FINISH_COMPILER(${compiler},${compiler})],
		wdtp_full_compiler_ver="test_${compiler}:"
		[for ver in ${tmp}; do
			wdtp_full_compiler_ver="${wdtp_full_compiler_ver} test_${compiler}_${ver}"
			WDTP_FINISH_COMPILER(${compiler},"${compiler}_${ver}")
		 done
		wdtp_full_string="$wdtp_full_string
${wdtp_full_compiler_ver}
"
		])
done
AC_SUBST(WDTP_LIST_TESTS, $wdtp_full_test)
AC_SUBST(WDTP_LIST_TARGETS, $wdtp_full_target)
AC_SUBST(WDTP_INCLUDE_TESTS, "${wdtp_full_cmds}${wdtp_full_string}")
])

dnl Local Variables:
dnl compile-command: "autoreconf --warnings=all"
dnl End:
